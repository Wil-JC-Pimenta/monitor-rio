name: CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['8.1', '8.2']
        node-version: ['18', '20']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, dom, fileinfo, sqlite, curl, zip, gd, intl, bcmath
        coverage: xdebug
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
        
    - name: Install Composer Dependencies
      run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --optimize-autoloader
      
    - name: Install NPM Dependencies
      run: npm ci
      
    - name: Copy Environment File
      run: cp .env.example .env
      
    - name: Generate Application Key
      run: php artisan key:generate
      
    - name: Create Database
      run: touch database/database.sqlite
      
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
      
    - name: Run Database Migrations
      run: php artisan migrate --force
      
    - name: Seed Database with Test Data
      run: php artisan db:seed
      
    - name: Execute Unit Tests
      run: php artisan test --testsuite=Unit --coverage
      
    - name: Execute Feature Tests
      run: php artisan test --testsuite=Feature --coverage
      
    - name: Run Linting
      run: npm run lint
      
    - name: Run Type Check
      run: npm run types
      
    - name: Build Assets
      run: npm run build
      
    - name: Test API Endpoints
      run: |
        php artisan serve --host=127.0.0.1 --port=8000 &
        sleep 10
        curl -f http://127.0.0.1:8000/health || exit 1
        curl -f http://127.0.0.1:8000/ || exit 1

  quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        tools: composer:v2
        
    - name: Install Dependencies
      run: |
        composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
        npm install
        
    - name: Run Pint (PHP Code Style)
      run: vendor/bin/pint --test
      
    - name: Run PHPStan (Static Analysis)
      run: |
        composer require --dev phpstan/phpstan --no-interaction
        vendor/bin/phpstan analyse app --level=5 --no-progress
        
    - name: Run ESLint
      run: npm run lint
      
    - name: Run Prettier Check
      run: npm run format:check

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        
    - name: Install Dependencies
      run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      
    - name: Run Security Check
      run: |
        composer require --dev enlightn/security-checker --no-interaction
        vendor/bin/security-checker security:check composer.lock
        
    - name: Run NPM Audit
      run: |
        npm install
        npm audit --audit-level=moderate

  deploy-preview:
    runs-on: ubuntu-latest
    needs: [test, quality, security]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, sqlite, curl, zip, gd, intl, bcmath
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install Dependencies
      run: |
        composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --optimize-autoloader
        npm ci
        
    - name: Build Assets
      run: npm run build
      
    - name: Deploy to Preview
      run: |
        echo "ðŸš€ Deploy preview would happen here"
        echo "âœ… All tests passed, ready for deployment"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, quality, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, sqlite, curl, zip, gd, intl, bcmath
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install Dependencies
      run: |
        composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --optimize-autoloader
        npm ci
        
    - name: Build Assets
      run: npm run build
      
    - name: Deploy to Production
      run: |
        echo "ðŸš€ Deploy to production would happen here"
        echo "âœ… All tests passed, ready for production deployment"