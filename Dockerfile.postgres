# Dockerfile para Monitor Rio Piracicaba com PostgreSQL
FROM php:8.1-fpm-alpine

# Instalar dependências do sistema
RUN apk add --no-cache \
    nginx \
    supervisor \
    curl \
    zip \
    unzip \
    git \
    nodejs \
    npm \
    postgresql-dev \
    libpq-dev \
    autoconf \
    g++ \
    make \
    pkgconfig

# Instalar extensões PHP necessárias
RUN docker-php-ext-install \
    pdo \
    pdo_pgsql \
    && docker-php-ext-enable pdo pdo_pgsql

# Instalar Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Definir diretório de trabalho
WORKDIR /var/www/html

# Copiar arquivos de configuração
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY docker/nginx.conf /etc/nginx/nginx.conf
COPY docker/php-fpm.conf /usr/local/etc/php-fpm.d/www.conf

# Copiar arquivos da aplicação
COPY . .

# Instalar dependências PHP
RUN composer install --no-dev --optimize-autoloader

# Instalar dependências Node.js e compilar assets
RUN npm install && npm run build

# Configurar permissões
RUN chown -R www-data:www-data /var/www/html \
    && chmod -R 755 /var/www/html/storage \
    && chmod -R 755 /var/www/html/bootstrap/cache

# Configurar .env para produção
RUN sed -i 's/APP_ENV=local/APP_ENV=production/' .env \
    && sed -i 's/APP_DEBUG=true/APP_DEBUG=false/' .env \
    && sed -i 's|APP_URL=http://localhost|APP_URL=http://localhost:8000|' .env \
    && sed -i 's/DB_CONNECTION=sqlite/DB_CONNECTION=pgsql/' .env \
    && sed -i 's|DB_DATABASE=.*|DB_DATABASE=monitor_rio|' .env \
    && echo "DB_HOST=postgres" >> .env \
    && echo "DB_PORT=5432" >> .env \
    && echo "DB_USERNAME=monitor_user" >> .env \
    && echo "DB_PASSWORD=monitor_pass" >> .env \
    && sed -i 's/SESSION_DRIVER=database/SESSION_DRIVER=file/' .env \
    && sed -i 's/QUEUE_CONNECTION=database/QUEUE_CONNECTION=sync/' .env \
    && sed -i 's/CACHE_STORE=database/CACHE_STORE=file/' .env

# Copiar script de inicialização
COPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Limpar cache
RUN php artisan config:cache \
    && php artisan route:cache \
    && php artisan view:cache

# Expor porta
EXPOSE 80

# Comando de inicialização
CMD ["/usr/local/bin/docker-entrypoint.sh"]
